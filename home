# Install TensorFlow
!pip install tensorflow

# Install additional libraries
!pip install numpy pandas matplotlib seaborn scikit-learn
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM
from sklearn import datasets

# Load the diabetes dataset
diabetes = datasets.load_diabetes()
data = pd.DataFrame(diabetes.data, columns=diabetes.feature_names)
data['target'] = diabetes.target

# Display first few rows of the dataset
data.head()
# Normalize data
from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()
scaled_data = scaler.fit_transform(data)

# Split data into features and labels
X = scaled_data[:, :-1]  # Features
y = scaled_data[:, -1]   # Labels

# Reshape data for LSTM
X_reshaped = np.reshape(X, (X.shape[0], X.shape[1], 1))
# Define the LSTM model
model = Sequential()
model.add(LSTM(units=50, return_sequences=True, input_shape=(X_reshaped.shape[1], 1)))
model.add(LSTM(units=50, return_sequences=False))
model.add(Dense(units=25))
model.add(Dense(units=1))

# Compile the model
model.compile(optimizer='adam', loss='mean_squared_error')
# Train the model
model.fit(X_reshaped, y, batch_size=1, epochs=10)
# Make predictions
predictions = model.predict(X_reshaped)

# Since the target values were scaled, we need to scale the predictions back
predictions = scaler.inverse_transform(np.hstack((np.zeros((predictions.shape[0], X.shape[1])), predictions)))[:, -1]

# Plot the results
plt.figure(figsize=(10, 6))
plt.plot(data['target'], label='Actual Target')
plt.plot(predictions, label='Predicted Target')
plt.title('Target Prediction')
plt.xlabel('Sample')
plt.ylabel('Target')
plt.legend()
plt.show()
